name: Update Historical Events

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC 0点（北京时间8点）运行
  workflow_dispatch:     # 允许手动触发

jobs:
  update-events:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 设置超时时间，防止无限运行
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1  # 只拉取最新提交，加快速度
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'  # 缓存npm依赖
          
      - name: Ensure dependency lock file exists
        run: |
          # 如果没有锁文件，生成一个（仅包含依赖信息，不安装）
          if [ ! -f "package.json" ]; then
            echo "创建基础package.json"
            npm init -y
          fi
          
          if [ ! -f "package-lock.json" ]; then
            echo "生成package-lock.json"
            npm install --package-lock-only @google/generative-ai node-schedule
          fi
          
      - name: Install dependencies
        run: |
          npm ci  # 使用ci命令安装，严格遵循锁文件版本
          
      - name: Generate today's events
        env:
          GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
          GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
        run: |
          echo "生成 $(date +'%Y-%m-%d') 的历史事件"
          node generate-events.js --today
          
      - name: Verify generated files
        run: |
          # 检查是否成功生成文件
          TODAY=$(date +'%Y-%m-%d')
          if [ ! -f "data/events-$TODAY.json" ]; then
            echo "错误：未生成事件数据文件"
            exit 1
          fi
          
          if [ ! -f "last-updated.txt" ]; then
            echo "错误：未生成更新时间文件"
            exit 1
          fi
          
          # 检查文件大小，确保内容有效
          if [ $(stat -c%s "data/events-$TODAY.json") -lt 100 ]; then
            echo "错误：事件数据文件内容过短"
            exit 1
          fi
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          # 检查是否有更改
          git add data/ cache/ last-updated.txt
          git diff --quiet --staged || git commit -m "Auto-update events for $(date +'%Y-%m-%d')"
          
          # 推送更改（仅当有提交时）
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            git push origin main
          else
            echo "没有更改需要推送"
          fi
          
      - name: Send success notification (optional)
        if: success()
        run: |
          echo "事件更新成功: $(date +'%Y-%m-%d')"
          # 如需添加通知，可在此处集成Slack、邮件等API
          
      - name: Send failure notification (optional)
        if: failure()
        run: |
          echo "事件更新失败: $(date +'%Y-%m-%d')"
          # 如需添加通知，可在此处集成Slack、邮件等API
